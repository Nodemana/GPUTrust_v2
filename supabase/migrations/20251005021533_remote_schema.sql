

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."generate_gpu_benchmark_avgs"() RETURNS "void"
    LANGUAGE "plpgsql"
    AS $$BEGIN
  INSERT INTO public.avg_gpu_benchmarks AS avg_tbl (
    gpu_AIB_partner,
    gpu_model,
    gpu_arch,
    vram_gb,
    avg_fp16_flops,
    avg_fp32_flops,
    avg_fp64_flops,
    avg_tensor_flops_fp16,
    avg_tensor_flops_fp32,
    avg_tensor_flops_fp64,
    avg_d2d_mem_bandwidth,
    avg_h2d_mem_bandwidth,
    avg_d2h_mem_bandwidth,
    avg_max_temp,
    avg_avg_temp,
    avg_max_pwr_draw,
    avg_avg_pwr_draw
  )
  SELECT
    b.gpu_name AS gpu_AIB_partner,  -- adjust if you have dedicated columns
    b.gpu_name AS gpu_model,
    b.gpu_arch,
    b.vram_gb,
    AVG(b.fp16_flops) AS avg_fp16_flops,
    AVG(b.fp32_flops) AS avg_fp32_flops,
    AVG(b.fp64_flops) AS avg_fp64_flops,
    AVG(b.tensor_flops_fp16) AS avg_tensor_flops_fp16,
    AVG(b.tensor_flops_bf16) AS avg_tensor_flops_fp32,  -- or map properly if needed
    AVG(b.tensor_flops_tf32) AS avg_tensor_flops_fp64,  -- adjust if different
    AVG(b.d2d_mem_bandwidth) AS avg_d2d_mem_bandwidth,
    AVG(b.h2d_mem_bandwidth) AS avg_h2d_mem_bandwidth,
    AVG(b.d2h_mem_bandwidth) AS avg_d2h_mem_bandwidth,
    AVG(b.max_temp) AS avg_max_temp,
    AVG(b.avg_temp) AS avg_avg_temp,
    AVG(b.max_pwr_draw) AS avg_max_pwr_draw,
    AVG(b.avg_pwr_draw) AS avg_avg_pwr_draw
  FROM public.gpu_benchmarks b
  GROUP BY b.gpu_name, b.gpu_arch, b.vram_gb
  ON CONFLICT (vram_gb, gpu_AIB_partner, gpu_model, gpu_arch)
  DO UPDATE SET
    avg_fp16_flops = EXCLUDED.avg_fp16_flops,
    avg_fp32_flops = EXCLUDED.avg_fp32_flops,
    avg_fp64_flops = EXCLUDED.avg_fp64_flops,
    avg_tensor_flops_fp16 = EXCLUDED.avg_tensor_flops_fp16,
    avg_tensor_flops_fp32 = EXCLUDED.avg_tensor_flops_fp32,
    avg_tensor_flops_fp64 = EXCLUDED.avg_tensor_flops_fp64,
    avg_d2d_mem_bandwidth = EXCLUDED.avg_d2d_mem_bandwidth,
    avg_h2d_mem_bandwidth = EXCLUDED.avg_h2d_mem_bandwidth,
    avg_d2h_mem_bandwidth = EXCLUDED.avg_d2h_mem_bandwidth,
    avg_max_temp = EXCLUDED.avg_max_temp,
    avg_avg_temp = EXCLUDED.avg_avg_temp,
    avg_max_pwr_draw = EXCLUDED.avg_max_pwr_draw,
    avg_avg_pwr_draw = EXCLUDED.avg_avg_pwr_draw;
END;$$;


ALTER FUNCTION "public"."generate_gpu_benchmark_avgs"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."avg_gpu_benchmarks" (
    "gpu_AIB_partner" "text" NOT NULL,
    "gpu_model" "text" NOT NULL,
    "gpu_arch" "text" NOT NULL,
    "vram_gb" bigint NOT NULL,
    "avg_fp16_flops" double precision,
    "avg_fp32_flops" double precision,
    "avg_fp64_flops" double precision,
    "avg_tensor_flops_fp16" double precision,
    "avg_tensor_flops_fp32" double precision,
    "avg_tensor_flops_fp64" double precision,
    "avg_d2d_mem_bandwidth" double precision,
    "avg_h2d_mem_bandwidth" double precision,
    "avg_d2h_mem_bandwidth" double precision,
    "avg_max_temp" double precision,
    "avg_avg_temp" double precision,
    "avg_max_pwr_draw" double precision,
    "avg_avg_pwr_draw" double precision
);


ALTER TABLE "public"."avg_gpu_benchmarks" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."gpu_benchmark_runtime" (
    "id" bigint NOT NULL,
    "benchmark_id" bigint,
    "captured_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "interval_ms" integer,
    "metrics" "jsonb"
);


ALTER TABLE "public"."gpu_benchmark_runtime" OWNER TO "postgres";


ALTER TABLE "public"."gpu_benchmark_runtime" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."gpu_benchmark_runtime_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."gpu_benchmarks" (
    "id" bigint NOT NULL,
    "inserted_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "uuid" "uuid" NOT NULL,
    "cuda_version" "text",
    "driver_version" "text",
    "gpu_model" "text",
    "gpu_arch" "text",
    "num_sm" bigint,
    "vram_gb" bigint,
    "fp16_flops" double precision,
    "fp32_flops" double precision,
    "fp64_flops" double precision,
    "tensor_flops_fp16" double precision,
    "tensor_flops_bf16" double precision,
    "tensor_flops_tf32" double precision,
    "tensor_flops_int8" double precision,
    "tensor_flops_fp8" double precision,
    "d2d_mem_bandwidth" double precision,
    "h2d_mem_bandwidth" double precision,
    "d2h_mem_bandwidth" double precision,
    "max_temp" double precision,
    "avg_temp" double precision,
    "max_pwr_draw" double precision,
    "avg_pwr_draw" double precision,
    "user_id" "uuid",
    "gpu_AIB_partner" "text"
);


ALTER TABLE "public"."gpu_benchmarks" OWNER TO "postgres";


ALTER TABLE "public"."gpu_benchmarks" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."gpu_benchmarks_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."gpu_listings" (
    "id" bigint NOT NULL,
    "benchmark_id" bigint NOT NULL,
    "price_amount" numeric(10,2) NOT NULL,
    "price_currency" "text" DEFAULT 'USD'::"text" NOT NULL,
    "condition" "text" NOT NULL,
    "title" "text" NOT NULL,
    "description" "text",
    "image_urls" "text"[],
    "location" "text",
    "status" "text" DEFAULT 'active'::"text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "user_id" "uuid",
    CONSTRAINT "gpu_listings_condition_check" CHECK (("condition" = ANY (ARRAY['new'::"text", 'like-new'::"text", 'used'::"text", 'refurbished'::"text"]))),
    CONSTRAINT "gpu_listings_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'sold'::"text", 'removed'::"text"])))
);


ALTER TABLE "public"."gpu_listings" OWNER TO "postgres";


ALTER TABLE "public"."gpu_listings" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."gpu_listings_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."users" (
    "username" "text",
    "email" "text" NOT NULL,
    "phone_number" bigint NOT NULL,
    "id" "uuid" NOT NULL
);


ALTER TABLE "public"."users" OWNER TO "postgres";


ALTER TABLE ONLY "public"."avg_gpu_benchmarks"
    ADD CONSTRAINT "avg_gpu_benchmarks_gpu_model_key" UNIQUE ("gpu_model");



ALTER TABLE ONLY "public"."avg_gpu_benchmarks"
    ADD CONSTRAINT "avg_gpu_benchmarks_pkey" PRIMARY KEY ("gpu_AIB_partner", "gpu_model", "gpu_arch", "vram_gb");



ALTER TABLE ONLY "public"."gpu_benchmark_runtime"
    ADD CONSTRAINT "gpu_benchmark_runtime_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."gpu_benchmarks"
    ADD CONSTRAINT "gpu_benchmarks_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."gpu_listings"
    ADD CONSTRAINT "gpu_listings_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_phone_number_key" UNIQUE ("phone_number");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");



CREATE INDEX "gpu_benchmark_runtime_benchmark_id_idx" ON "public"."gpu_benchmark_runtime" USING "btree" ("benchmark_id");



CREATE INDEX "gpu_benchmark_runtime_captured_at_idx" ON "public"."gpu_benchmark_runtime" USING "btree" ("captured_at");



CREATE INDEX "idx_gpu_listings_created_at" ON "public"."gpu_listings" USING "btree" ("created_at" DESC);



CREATE INDEX "idx_gpu_listings_status" ON "public"."gpu_listings" USING "btree" ("status");



ALTER TABLE ONLY "public"."gpu_benchmark_runtime"
    ADD CONSTRAINT "gpu_benchmark_runtime_benchmark_id_fkey" FOREIGN KEY ("benchmark_id") REFERENCES "public"."gpu_benchmarks"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."gpu_benchmarks"
    ADD CONSTRAINT "gpu_benchmarks_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."gpu_listings"
    ADD CONSTRAINT "gpu_listings_benchmark_id_fkey" FOREIGN KEY ("benchmark_id") REFERENCES "public"."gpu_benchmarks"("id");



ALTER TABLE ONLY "public"."gpu_listings"
    ADD CONSTRAINT "gpu_listings_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



CREATE POLICY "Active listings are viewable by everyone" ON "public"."gpu_listings" FOR SELECT USING (("status" = 'active'::"text"));



CREATE POLICY "Benchmarks linked to active listings are viewable" ON "public"."gpu_benchmarks" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM "public"."gpu_listings"
  WHERE (("gpu_listings"."benchmark_id" = "gpu_benchmarks"."id") AND ("gpu_listings"."status" = 'active'::"text")))));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."users" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."users" FOR SELECT USING (true);



CREATE POLICY "Enable update for users based on email" ON "public"."users" FOR UPDATE USING (((( SELECT "auth"."jwt"() AS "jwt") ->> 'email'::"text") = "email")) WITH CHECK (((( SELECT "auth"."jwt"() AS "jwt") ->> 'email'::"text") = "email"));



ALTER TABLE "public"."avg_gpu_benchmarks" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."gpu_benchmark_runtime" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."gpu_benchmarks" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."gpu_listings" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

























































































































































GRANT ALL ON FUNCTION "public"."generate_gpu_benchmark_avgs"() TO "anon";
GRANT ALL ON FUNCTION "public"."generate_gpu_benchmark_avgs"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."generate_gpu_benchmark_avgs"() TO "service_role";


















GRANT ALL ON TABLE "public"."avg_gpu_benchmarks" TO "anon";
GRANT ALL ON TABLE "public"."avg_gpu_benchmarks" TO "authenticated";
GRANT ALL ON TABLE "public"."avg_gpu_benchmarks" TO "service_role";



GRANT ALL ON TABLE "public"."gpu_benchmark_runtime" TO "anon";
GRANT ALL ON TABLE "public"."gpu_benchmark_runtime" TO "authenticated";
GRANT ALL ON TABLE "public"."gpu_benchmark_runtime" TO "service_role";



GRANT ALL ON SEQUENCE "public"."gpu_benchmark_runtime_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."gpu_benchmark_runtime_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."gpu_benchmark_runtime_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."gpu_benchmarks" TO "anon";
GRANT ALL ON TABLE "public"."gpu_benchmarks" TO "authenticated";
GRANT ALL ON TABLE "public"."gpu_benchmarks" TO "service_role";



GRANT ALL ON SEQUENCE "public"."gpu_benchmarks_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."gpu_benchmarks_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."gpu_benchmarks_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."gpu_listings" TO "anon";
GRANT ALL ON TABLE "public"."gpu_listings" TO "authenticated";
GRANT ALL ON TABLE "public"."gpu_listings" TO "service_role";



GRANT ALL ON SEQUENCE "public"."gpu_listings_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."gpu_listings_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."gpu_listings_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";






























RESET ALL;

